{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/print","result":{"data":{"deck":{"id":"1e9f6e11-750b-5784-a492-59bda4973454","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme(dracula);\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Frontendkurs \\u2013 React & TypeScript\"), Object.values(imgs).map(function (img) {\n    mdx(\"link\", {\n      rel: \"preload\",\n      as: \"image\",\n      href: img\n    });\n  })), mdx(Image, {\n    src: imgs.bg,\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingRight: '1rem',\n      color: 'black',\n      backgroundColor: 'black'\n    },\n    mdxType: \"Image\"\n  }, mdx(\"h1\", null, \"Frontendkurs 2020\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Agenda\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"del\", {\n    parentName: \"li\"\n  }, \"Universell utforming\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"React & TypeScript\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"React Hooks\")), mdx(\"hr\", null), mdx(Image, {\n    src: imgs.bg,\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingRight: '1rem',\n      color: 'black',\n      backgroundColor: 'black'\n    },\n    mdxType: \"Image\"\n  }, mdx(\"h2\", null, \"React & TypeScript\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"De fleste her bruker vel n\\xE5 TypeScript. Men det var flere som nevnte at de gjerne\\nkunne tenke seg \\xE5 h\\xF8re om TypeScript og React, og kanskje gjerne mer avanserte\\nfeatures av TypeScript.\"), mdx(\"p\", null, \"S\\xE5 da tenker jeg det var passende \\xE5 se p\\xE5 de punktene man ofte bruker TypeScript\\nsammen med React og hvordan man kan bruke det.\")), mdx(\"hr\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Typing av komponenter\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Typing av generic components\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Typing av wrappers\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Union types\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Vi kommer til \\xE5 dekke ulike behov her, fra typing av komponenter direkte til generics i komponenter,\\nH\\xF8yere Ordens Komponenter eller wrappers og hvordan man kan bruke unions i params\\nfor \\xE5 lage bedre API-er for komponenter.\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\"\n  }), \"export default function Button({ mode, children }) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-jsx\",\n    \"metastring\": \"1:1\",\n    \"1:1\": true\n  }), \"export default function Button({ mode, children }) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n};\\n\\nexport default Button;\\n\\nconst Button: React.FC<ButtonProps> = function Button({\\n  mode,\\n  children,\\n}) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n};\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"7:10 subtitle=\\\"Har sine utfordringer\\\"\",\n    \"7:10\": true,\n    \"subtitle\": \"\\\"Har\",\n    \"sine\": true,\n    \"utfordringer\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n};\\n\\nexport default Button;\\n\\nconst Button: React.FC<ButtonProps> = function Button({\\n  mode,\\n  children,\\n}) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n};\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Alternativt\\\"\",\n    \"subtitle\": \"\\\"Alternativt\\\"\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n};\\n\\nexport default function Button({\\n  mode,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7 subtitle=\\\"Hva med children?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"med\": true,\n    \"children?\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n};\\n\\nexport default function Button({\\n  mode,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7 subtitle=\\\"Hva med children?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"med\": true,\n    \"children?\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n};\\n\\nexport default function Button({\\n  mode,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n};\\n\\nexport default function Button({\\n  mode,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = React.PropsWithChildren<{\\n  mode: string;\\n}>;\\n\\nexport default function Button({\\n  mode,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames) =>\\n  classNames.filter(Boolean).join(' ');\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"3[13:27]\",\n    \"3[13:27]\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Alt som er gyldig\\\"\",\n    \"subtitle\": \"\\\"Alt\",\n    \"som\": true,\n    \"er\": true,\n    \"gyldig\\\"\": true\n  }), \"type ReactNode =\\n  | ReactChild\\n  | ReactFragment\\n  | ReactPortal\\n  | boolean\\n  | null\\n  | undefined;\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n  icon: '???';\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n  icon: React.ReactNode;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  children: React.ReactNode;\\n  icon: JSX.Element;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"JSX.Element = Det React.FC returnerer \\\"\",\n    \"subtitle\": \"\\\"JSX.Element\",\n    \"\": \"\",\n    \"Det\": true,\n    \"React.FC\": true,\n    \"returnerer\": true,\n    \"\\\"\": true\n  }), \"namespace JSX {\\n  interface Element extends React.ReactElement<any, any> {}\\n}\\n\\ninterface ReactElement<P, T> {\\n  type: T;\\n  props: P;\\n  key: Key | null;\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Return type infereres\\\"\",\n    \"subtitle\": \"\\\"Return\",\n    \"type\": true,\n    \"infereres\\\"\": true\n  }), \"type ButtonProps = React.PropsWithChildren<{\\n  mode: string;\\n  icon: JSX.Element;\\n}>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Men vi mangler mange props, som f.eks onClick\\\"\",\n    \"subtitle\": \"\\\"Men\",\n    \"vi\": true,\n    \"mangler\": true,\n    \"mange\": true,\n    \"props,\": true,\n    \"som\": true,\n    \"f.eks\": true,\n    \"onClick\\\"\": true\n  }), \"type ButtonProps = React.PropsWithChildren<{\\n  mode: string;\\n  icon: JSX.Element;\\n}>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Men vi mangler mange props, som f.eks onClick\\\"\",\n    \"subtitle\": \"\\\"Men\",\n    \"vi\": true,\n    \"mangler\": true,\n    \"mange\": true,\n    \"props,\": true,\n    \"som\": true,\n    \"f.eks\": true,\n    \"onClick\\\"\": true\n  }), \"type ButtonProps = React.PropsWithChildren<{\\n  mode: string;\\n  icon: JSX.Element;\\n}>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & JSX.IntrinsicElements['button'];\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button className={and(css.button, modifier)}>\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & JSX.IntrinsicElements['button'];\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  onClick,\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      onClick={onClick}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & JSX.IntrinsicElements['button'];\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4[4:35]\",\n    \"4[4:35]\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & JSX.IntrinsicElements['button'];\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type MyType = {\\n  foo: { prop1: string };\\n};\\n\\ntype MySubType = MyType['foo'];\\n\\nconst data: MySubType = { prop1: 'hello' };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type MyType = {\\n  foo: { prop1: string };\\n};\\n\\nconst value: MyType = { foo: { prop1: 'Bye' } };\\n\\nconst data: MySubType = { prop1: 'hello' };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type MyType = {\\n  foo: { prop1: string };\\n};\\n\\nconst value: MyType = { foo: { prop1: 'Bye' } };\\n\\ntype MySubType = typeof value['foo'];\\n\\nconst data: MySubType = { prop1: 'hello' };\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import Button from './button';\\n\\ntype ThisIsString = React.ComponentProps<\\n  typeof Button\\n>['mode'];\\n\\nconst data: MySubType = { prop1: 'hello' };\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & JSX.IntrinsicElements['button'];\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva om vi vil unngå ref?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"om\": true,\n    \"vi\": true,\n    \"vil\": true,\n    \"unngå\": true,\n    \"ref?\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & Omit<JSX.IntrinsicElements['button'], 'ref'>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Innebygget metode\\\"\",\n    \"subtitle\": \"\\\"Innebygget\",\n    \"metode\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,13 subtitle=\\\"Dette er dårlig API\\\"\",\n    \"2,13\": true,\n    \"subtitle\": \"\\\"Dette\",\n    \"er\": true,\n    \"dårlig\": true,\n    \"API\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: string;\\n  icon: JSX.Element;\\n} & React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2,13 subtitle=\\\"Vi kan gjøre det bedre med union types\\\"\",\n    \"2,13\": true,\n    \"subtitle\": \"\\\"Vi\",\n    \"kan\": true,\n    \"gjøre\": true,\n    \"det\": true,\n    \"bedre\": true,\n    \"med\": true,\n    \"union\": true,\n    \"types\\\"\": true\n  }), \"type ButtonProps = {\\n  mode: 'primary' | 'destructive';\\n  icon: JSX.Element;\\n} & React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  mode,\\n  icon,\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  const modifier =\\n    mode === 'primary' ? css.button__primary : undefined;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\nconst and = (...classNames: (string | undefined)[]) =>\\n  classNames.filter(Boolean).join(' ');\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Type hjelp og unions\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Vi kan være mer behjelpelig\\\"\",\n    \"subtitle\": \"\\\"Vi\",\n    \"kan\": true,\n    \"være\": true,\n    \"mer\": true,\n    \"behjelpelig\\\"\": true\n  }), \"type ButtonProps = (\\n  | {\\n      mode: 'primary';\\n    }\\n  | {\\n      mode: 'destructive';\\n      icon: JSX.Element;\\n    }\\n) &\\n  React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  /* Implementation */\\n}\\n\\n// Does not compile. Icon not a property\\nconst foo = <Button mode=\\\"primary\\\" icon={<span />} />;\\n\\n// Does compile! Icon is a property :thumbsup:\\nconst foo = <Button mode=\\\"destructive\\\" icon={<span />} />;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"2:8\",\n    \"2:8\": true\n  }), \"type ButtonProps = (\\n  | {\\n      mode: 'primary';\\n    }\\n  | {\\n      mode: 'destructive';\\n      icon: JSX.Element;\\n    }\\n) &\\n  React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  /* Implementation */\\n}\\n\\n// Does not compile. Icon not a property\\nconst foo = <Button mode=\\\"primary\\\" icon={<span />} />;\\n\\n// Does compile! Icon is a property :thumbsup:\\nconst foo = <Button mode=\\\"destructive\\\" icon={<span />} />;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"19:26\",\n    \"19:26\": true\n  }), \"type ButtonProps = (\\n  | {\\n      mode: 'primary';\\n    }\\n  | {\\n      mode: 'destructive';\\n      icon: JSX.Element;\\n    }\\n) &\\n  React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  /* Implementation */\\n}\\n\\n// Does not compile. Icon not a property\\nconst foo = <Button mode=\\\"primary\\\" icon={<span />} />;\\n\\n// Does compile! Icon is a property :thumbsup:\\nconst foo = <Button mode=\\\"destructive\\\" icon={<span />} />;\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hjelper oss også i implementasjonen\\\"\",\n    \"subtitle\": \"\\\"Hjelper\",\n    \"oss\": true,\n    \"også\": true,\n    \"i\": true,\n    \"implementasjonen\\\"\": true\n  }), \"type ButtonProps = (\\n  | {\\n      mode: 'primary';\\n    }\\n  | {\\n      mode: 'destructive';\\n      icon: JSX.Element;\\n    }\\n) &\\n  React.PropsWithoutRef<JSX.IntrinsicElements['button']>;\\n\\nexport default function Button({\\n  children,\\n  ...props\\n}: ButtonProps) {\\n  // Here we get type hinting on icon when mode is destructive\\n  const icon = props.mode !== 'primary' ? props.icon : null;\\n\\n  const modifier =\\n    props.mode === 'primary'\\n      ? css.button__primary\\n      : css.button__destructive;\\n\\n  return (\\n    <button\\n      className={and(css.button, modifier)}\\n      {...props}\\n    >\\n      {icon}\\n      {children}\\n    </button>\\n  );\\n}\\n\\n// Does not compile. Icon not a property\\nconst foo = <Button mode=\\\"primary\\\" icon={<span />} />;\\n\\n// Does compile! Icon is a property :thumbsup:\\nconst foo = <Button mode=\\\"destructive\\\" icon={<span />} />;\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Generics\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type SelectProps = {\\n  data: Array<number | string>;\\n  onClick(val: number | string): void;\\n};\\nconst Select: React.FC<SelectProps> = ({\\n  data,\\n  onClick,\\n}) => {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {val}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const myComp = (\\n  <Select\\n    data={[1, 2, 3]}\\n    onClick={(val) =>\\n      console.log('Is val string or number???')\\n    }\\n  />\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Enda verre, kan blande verdier\\\"\",\n    \"subtitle\": \"\\\"Enda\",\n    \"verre,\": true,\n    \"kan\": true,\n    \"blande\": true,\n    \"verdier\\\"\": true\n  }), \"const myComp = (\\n  <Select\\n    data={[1, 'hello', 3]}\\n    onClick={(val) => console.log(' :o ')}\\n  />\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"1:4\",\n    \"1:4\": true\n  }), \"type SelectProps<T = string | number> = {\\n  data: Array<T>;\\n  onClick(val: T): void;\\n};\\nconst Select: React.FC<SelectProps> = ({\\n  data,\\n  onChange,\\n}) => {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {val}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"5\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"5\"\n  }), \"type SelectProps<T = string | number> = {\\n  data: Array<T>;\\n  onClick(val: T): void;\\n};\\nconst Select: React.FC<SelectProps> = ({\\n  data,\\n  onChange,\\n}) => {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {val}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"5,8\",\n    \"5,8\": true\n  }), \"type SelectProps<T = string | number> = {\\n  data: Array<T>;\\n  onClick(val: T): void;\\n};\\nfunction Select<T = string | number>({\\n  data,\\n  onChange,\\n}: SelectProps<T>) => {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {val}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Kan fortsatt blande verdier\\\"\",\n    \"subtitle\": \"\\\"Kan\",\n    \"fortsatt\": true,\n    \"blande\": true,\n    \"verdier\\\"\": true\n  }), \"const myComp = (\\n  <Select\\n    data={[1, 'hello', 3]}\\n    onClick={(val) => console.log(' :o ')}\\n  />\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"7:12\",\n    \"7:12\": true\n  }), \"type SelectProps<T = string | number> = {\\n  data: Array<T>;\\n  onClick(val: T): void;\\n};\\n\\n// Function overloading\\nfunction Select(props: SelectProps<number>): JSX.Element;\\nfunction Select(props: SelectProps<string>): JSX.Element;\\nfunction Select({\\n  data,\\n  onClick,\\n}: SelectProps<number | string>) {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {val}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type SelectProps<T> = {\\n  data: Array<T>;\\n  onClick(val: T): void;\\n  itemToString(val: T): string;\\n};\\n\\nfunction Select<T>({\\n  data,\\n  onClick,\\n  itemToString,\\n}: SelectProps<T>) {\\n  return (\\n    <ul>\\n      {data.map((val) => (\\n        <li>\\n          <button onClick={() => onClick(val)}>\\n            {itemToString(val)}\\n          </button>\\n        </li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const mySelect = (\\n  <Select<number>\\n    data={[1, 2, 3]}\\n    itemToString={String}\\n    onClick={console.log}\\n  />\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const mySelect = (\\n  <Select\\n    data={[1, 2, 3]}\\n    itemToString={String}\\n    onClick={console.log}\\n  />\\n);\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Case\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://var.show/akva-case2\"\n  }), \"http://var.show/akva-case2\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"1e9f6e11-750b-5784-a492-59bda4973454","slug":"","title":"Frontendkurs 2020"}},"staticQueryHashes":[]}