{"componentChunkName":"component---gatsby-theme-mdx-deck-src-templates-deck-js","path":"/","matchPath":"/*","result":{"data":{"deck":{"id":"70b07066-c7a2-5a2c-a79a-2bb1d14e332c","body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsx mdx */\nvar theme = customTheme(dracula);\nvar _frontmatter = {};\nvar layoutProps = {\n  theme: theme,\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(Head, {\n    mdxType: \"Head\"\n  }, mdx(\"title\", null, \"Frontendkurs \\u2013 React Hooks\"), Object.values(imgs).map(function (img) {\n    mdx(\"link\", {\n      rel: \"preload\",\n      as: \"image\",\n      href: img\n    });\n  })), mdx(Image, {\n    src: imgs.bg,\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingRight: '1rem',\n      color: 'black',\n      backgroundColor: 'black'\n    },\n    mdxType: \"Image\"\n  }, mdx(\"h1\", null, \"Frontendkurs 2020\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Agenda\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"del\", {\n    parentName: \"li\"\n  }, \"Universell utforming\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, mdx(\"del\", {\n    parentName: \"li\"\n  }, \"React & TypeScript\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"React Hooks\")), mdx(\"hr\", null), mdx(Image, {\n    src: imgs.bg,\n    style: {\n      display: 'flex',\n      alignItems: 'center',\n      justifyContent: 'center',\n      paddingRight: '1rem',\n      color: 'black',\n      backgroundColor: 'black'\n    },\n    mdxType: \"Image\"\n  }, mdx(\"h2\", null, \"React Hooks\")), mdx(Notes, {\n    mdxType: \"Notes\"\n  }), mdx(\"hr\", null), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Innebygde hooks\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Mer om \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useEffect\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Egne hooks & typing\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Context & \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useContext\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"The why\"), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Men hvorfor er det en greie?\"), mdx(\"p\", null, \"Kort oppsummert: M\\xE5let er gjenbrukbarhet. Med tidligere m\\xE5ter \\xE5 h\\xE5ndtere\\nlokal tilstand p\\xE5 s\\xE5 s\\xE5 man at det var vanskelig \\xE5 dele det p\\xE5 tvers av komponenter\\np\\xE5 en naturlig m\\xE5te.\"), mdx(\"p\", null, \"For de som har skrevet React lenge er det ikke s\\xE5 ulikt et konsept fra tidlige dager\\nmed mixins, bare at dette er en noe mer funksjonell tiln\\xE6rmingsm\\xE5te.\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"The how\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"The how\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-md\"\n  }), \"1. Kun p\\xE5 toppniv\\xE5\\n2. Ikke noe conditionals\\n3. Kun fra komponenter (eller via custom hooks)\\n\")))), mdx(Notes, {\n    mdxType: \"Notes\"\n  }, mdx(\"p\", null, \"Hooks! Selv om det ikke har fjernet st\\xF8tte for noe som har eksistert\\nfra f\\xF8r s\\xE5 har det erstattet det meste av etablerte patterns i React.\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Forskjellige typer hooks\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Tilstand (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useState\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useReducer\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useContext\"), \")\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lytting p\\xE5 data (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useEffect\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useCallback\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useMemo\"), \", ++)\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Hjelpe-hooks (\", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"useRef\"), \", ++)\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Tilstand\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4[37:44]\",\n    \"4[37:44]\": true\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4[45:47]\",\n    \"4[45:47]\": true\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4[9:26]\",\n    \"4[9:26]\": true\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const stateTuple: [\\n    number,\\n    (newValue: number) => void,\\n  ] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const stateTuple: [\\n    number,\\n    (newValue: number) => void,\\n  ] = useState<number>(0);\\n\\n  const [count, setCount] = stateTuple;\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState<number>(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState(0);\\n\\n  return (\\n    <button onClick={() => setCount(count + 1)}>\\n      {count}\\n    </button>\\n  );\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Ogs\\xE5 for komplekse objekter\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [state, setState] = useState({ count: 0, next: 1 });\\n\\n  return (\\n    <button\\n      onClick={() =>\\n        setState({\\n          count: state.count + 1,\\n          next: state.next + 1,\\n        })\\n      }\\n    >\\n      {state.count} (neste: {state.next})\\n    </button>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Men kan spre ut i flere states\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState(0);\\n  const [next, setNext] = useState(1);\\n\\n  const update = () => {\\n    setCount(count + 1);\\n    setNext(next + 1);\\n  };\\n\\n  return (\\n    <button onClick={update}>\\n      {count} (neste: {next})\\n    </button>\\n  );\\n}\\n\"))), mdx(Step, {\n    subtitle: \"But does it scale?\",\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Men kan spre ut i flere states\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useState } from 'react';\\n\\nfunction CounterButton() {\\n  const [count, setCount] = useState(0);\\n  const [next, setNext] = useState(1);\\n\\n  const update = () => {\\n    setCount(count + 1);\\n    setNext(next + 1);\\n  };\\n\\n  return (\\n    <button onClick={update}>\\n      {count} (neste: {next})\\n    </button>\\n  );\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useReducer\")), mdx(\"p\", null, \"Om du vil ha kompleks, avhengig tilstand.\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import React, { useReducer } from 'react';\\n\\ntype CounterState = {\\n  count: number;\\n  next: number;\\n};\\n\\ntype CounterActions =\\n  | {\\n      type: 'COUNT_INCREMENT';\\n    }\\n  | {\\n      type: 'COUNT_DECREMENT';\\n    };\\n\\nconst initialState: CounterState = {\\n  count: 0,\\n  next: 1,\\n};\\n\\nconst counterReducer: React.Reducer<\\n  CounterState,\\n  CounterActions\\n> = (state, action) => {\\n  switch (action.type) {\\n    case 'COUNT_INCREMENT':\\n      return {\\n        count: state.count + 1,\\n        next: state.next + 1,\\n      };\\n    case 'COUNT_DECREMENT':\\n      if (state.next === 0) {\\n        return state;\\n      }\\n\\n      return {\\n        count: state.count - 1,\\n        next: state.next - 1,\\n      };\\n  }\\n};\\n\\nfunction CounterButton() {\\n  const [state, dispatch] = useReducer(\\n    counterReducer,\\n    initialState,\\n  );\\n  const increment = () =>\\n    dispatch({ type: 'COUNT_INCREMENT' });\\n  const decrement = () =>\\n    dispatch({ type: 'COUNT_DECREMENT' });\\n\\n  return (\\n    <div>\\n      <p>{state.count}</p>\\n      <button onClick={increment}>Increment</button>\\n      <button onClick={decrement}>Decrement</button>\\n    </div>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"3:6\",\n    \"3:6\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"16:19\",\n    \"16:19\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"8:14\",\n    \"8:14\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"21:41\",\n    \"21:41\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"26,31\",\n    \"26,31\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"44:47\",\n    \"44:47\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"48:51\",\n    \"48:51\": true\n  }), \"\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"55:57\",\n    \"55:57\": true\n  }), \"\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Oppgaver\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lag en komponent som skriver ut tekst fra en input-boks\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Lytting p\\xE5 data\"), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMemo\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ListProps = {\\n  data: string[];\\n};\\nfunction List({ data }: ListProps) {\\n  const sortedList = React.useMemo(\\n    () => data.sort(sortByName),\\n    [data],\\n  );\\n\\n  return (\\n    <ul>\\n      {sortedList.map((val) => (\\n        <li key={val}>{val}</li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction sortByName() {\\n  // implementation\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMemo\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\",\n    \"metastring\": \"5:8\",\n    \"5:8\": true\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMemo\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-diff\",\n    \"metastring\": \"7\"\n  }), \"\")))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Object.is\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Object.is('foo', 'foo'); // true\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Object.is\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Object.is('foo', 'foo'); // true\\nObject.is(NaN, NaN); // true\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Object.is\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Object.is('foo', 'foo'); // true\\nObject.is(NaN, NaN); // true\\nObject.is(NaN, 'NaN'); // false\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Object.is\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"Object.is('foo', 'foo'); // true\\nObject.is(NaN, NaN); // true\\nObject.is(NaN, 'NaN'); // false\\nObject.is({}, {}); // false\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"Object.is\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"let foo = {};\\nObject.is(foo, foo); // true\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMemo\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7\"\n  }), \"type ListProps = {\\n  data: string[];\\n};\\nfunction List({ data }: ListProps) {\\n  const sortedList = React.useMemo(\\n    () => data.sort(sortByName),\\n    [data],\\n  );\\n\\n  return (\\n    <ul>\\n      {sortedList.map((val) => (\\n        <li key={val}>{val}</li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction sortByName() {\\n  // implementation\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useMemo\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"7\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"7\"\n  }), \"type ListProps = {\\n  data: string[];\\n};\\nfunction List({ data }: ListProps) {\\n  const sortedList = React.useMemo(\\n    () => data.sort(sortByName),\\n    [],\\n  );\\n\\n  return (\\n    <ul>\\n      {sortedList.map((val) => (\\n        <li key={val}>{val}</li>\\n      ))}\\n    </ul>\\n  );\\n}\\n\\nfunction sortByName() {\\n  // implementation\\n}\\n\")))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"3\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"3 subtitle=\\\"Hva om vi får med sort?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"om\": true,\n    \"vi\": true,\n    \"får\": true,\n    \"med\": true,\n    \"sort?\\\"\": true\n  }), \"type ListProps = {\\n  data: string[];\\n  sortFn(val: string[]): string[];\\n};\\nfunction List({ data, sortFn }: ListProps) {\\n  const sortedList = React.useMemo(() => sortFn(data), [\\n    data,\\n  ]);\\n\\n  // rest of function here...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type ListProps = {\\n  data: string[];\\n  sortFn(val: string[]): string[];\\n};\\nfunction List({ data, sortFn }: ListProps) {\\n  const sortedList = React.useMemo(() => sortFn(data), [\\n    data,\\n    sortFn,\\n  ]);\\n\\n  // rest of function here...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyApp() {\\n  return (\\n    <List data={['a', 'b', 'c']} sortFn={(l) => l.sort()} />\\n  );\\n}\\n\\ntype ListProps = {\\n  data: string[];\\n  sortFn(val: string[]): string[];\\n};\\nfunction List({ data, sortFn }: ListProps) {\\n  const sortedList = React.useMemo(() => sortFn(data), [\\n    data,\\n    sortFn,\\n  ]);\\n\\n  // rest of function here...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyApp() {\\n  // Hva skjer med sortFn her?\\n  return (\\n    <List data={['a', 'b', 'c']} sortFn={(l) => l.sort()} />\\n  );\\n}\\n\\ntype ListProps = {\\n  data: string[];\\n  sortFn(val: string[]): string[];\\n};\\nfunction List({ data, sortFn }: ListProps) {\\n  const sortedList = React.useMemo(() => sortFn(data), [\\n    data,\\n    sortFn,\\n  ]);\\n\\n  // rest of function here...\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyApp() {\\n  const cachedSortFn = React.useCallback(\\n    (l: string[]) => l.sort(),\\n    [],\\n  );\\n  return (\\n    <List data={['a', 'b', 'c']} sortFn={cachedSortFn} />\\n  );\\n}\\n\\ntype ListProps = {\\n  data: string[];\\n  sortFn(val: string[]): string[];\\n};\\nfunction List({ data, sortFn }: ListProps) {\\n  const sortedList = React.useMemo(() => sortFn(data), [\\n    data,\\n    sortFn,\\n  ]);\\n\\n  // rest of function here...\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h3\", null, mdx(\"inlineCode\", {\n    parentName: \"h3\"\n  }, \"useEffect\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"useEffect(\\n  () => {\\n    // function body\\n  },\\n  [\\n    /* dependencies */\\n  ],\\n);\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent() {\\n  useEffect(\\n    () => {\\n      // function body\\n    },\\n    [\\n      /* dependencies */\\n    ],\\n  );\\n\\n  return <h1>Hello, World!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent() {\\n  useEffect(\\n    () => {\\n      // N\\xE5r kj\\xF8res dette?\\n    },\\n    [\\n      /* dependencies */\\n    ],\\n  );\\n\\n  return <h1>Hello, World!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent() {\\n  useEffect(\\n    () => {\\n      // Hva kan kj\\xF8res inne her?\\n    },\\n    [\\n      /* dependencies */\\n    ],\\n  );\\n\\n  return <h1>Hello, World!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent() {\\n  useEffect(() => {\\n    document.title = 'Hello, World!';\\n  }, []);\\n\\n  return <h1>Hello, World!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent({ title }: { title: string }) {\\n  useEffect(() => {\\n    document.title = 'Hello, World!';\\n  }, []);\\n\\n  return <h1>Hello, World!</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent({ title }: { title: string }) {\\n  useEffect(() => {\\n    document.title = title;\\n  }, []);\\n\\n  return <h1>{title}</h1>;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function MyComponent({ title }: { title: string }) {\\n  useEffect(() => {\\n    document.title = title;\\n  }, [title]);\\n\\n  return <h1>{title}</h1>;\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [1, 2],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n  React.useEffect(() => {\\n    const getData = async () => {\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6[17:26] subtitle=\\\"Denne er ubrukt\\\"\",\n    \"6[17:26]\": true,\n    \"subtitle\": \"\\\"Denne\",\n    \"er\": true,\n    \"ubrukt\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    // noe med setAvatar\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    fetch(`https://api.github.com/users/${username}`)\\n      .then((result) => result.json())\\n      .then((data) => data.avatar_url)\\n      .then(setAvatar);\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva med async/await?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"med\": true,\n    \"async/await?\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    fetch(`https://api.github.com/users/${username}`)\\n      .then((result) => result.json())\\n      .then((data) => data.avatar_url)\\n      .then(setAvatar);\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva med async/await?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"med\": true,\n    \"async/await?\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const getData = async () => {};\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Bivirkninger\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva med async/await?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"med\": true,\n    \"async/await?\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const getData = async () => {\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n      );\\n      const data = await result.json();\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Oppgaver\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lag en komponent som viser tekst fra navn som ligger i URL Query Parameter.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lag en komponent som viser et \\\"Github visittkort\\\" av bruker spesifisert av URL Query Parameter\")), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Clean-up\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva om vi har noe som dette?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"om\": true,\n    \"vi\": true,\n    \"har\": true,\n    \"noe\": true,\n    \"som\": true,\n    \"dette?\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {}\\n\\nfunction App() {\\n  const [username, setUsername] = React.useState<string>(\\n    'mikaelbr',\\n  );\\n  const toggle = () =>\\n    setUsername(\\n      username === 'mikaelbr'\\n        ? 'mathiasflaatt'\\n        : 'mikaelbr',\\n    );\\n\\n  return (\\n    <div className=\\\"App\\\">\\n      <div>\\n        <button onClick={toggle}>Toggle avatar</button>\\n      </div>\\n      <Avatar username={username} />\\n    </div>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Clean-up\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Mye unødvendig API kall\\\"\",\n    \"subtitle\": \"\\\"Mye\",\n    \"unødvendig\": true,\n    \"API\": true,\n    \"kall\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const getData = async () => {\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n      );\\n      const data = await result.json();\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\\nfunction App() {}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Clean-up\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Kan bruke cleanup i effects\\\"\",\n    \"subtitle\": \"\\\"Kan\",\n    \"bruke\": true,\n    \"cleanup\": true,\n    \"i\": true,\n    \"effects\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\\nfunction App() {}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"h2\", null, \"Clean-up\"), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"http://var.show/akva-cleanup\\\"\",\n    \"subtitle\": \"\\\"http://var.show/akva-cleanup\\\"\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\\nfunction App() {}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Custom Hooks\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Dette er vanskelig å lese\\\"\",\n    \"subtitle\": \"\\\"Dette\",\n    \"er\": true,\n    \"vanskelig\": true,\n    \"å\": true,\n    \"lese\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"6:26 subtitle=\\\"Alt dette hører sammen og er gjenbrukbart\\\"\",\n    \"6:26\": true,\n    \"subtitle\": \"\\\"Alt\",\n    \"dette\": true,\n    \"hører\": true,\n    \"sammen\": true,\n    \"og\": true,\n    \"er\": true,\n    \"gjenbrukbart\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const avatar = useFetchGithubAvatar(username);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Det var bedre!\\\"\",\n    \"subtitle\": \"\\\"Det\",\n    \"var\": true,\n    \"bedre!\\\"\": true\n  }), \"type AvatarProps = {\\n  username: string;\\n};\\n\\nfunction Avatar({ username }: AvatarProps) {\\n  const avatar = useFetchGithubAvatar(username);\\n\\n  if (!avatar) {\\n    return <p>Not found</p>;\\n  }\\n\\n  return <img src={avatar} alt={username} />;\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Eksempler p\\xE5 custom hooks\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const useDocumentTitle = (title: string) => {\\n  useEffect(() => {\\n    document.title = title;\\n  }, [title]);\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"const useFavicon = (href: string) => {\\n  useEffect(() => {\\n    const link =\\n      document.querySelector(\\\"link[rel*='icon']\\\") ||\\n      document.createElement('link');\\n    link.type = 'image/x-icon';\\n    link.rel = 'shortcut icon';\\n    link.href = href;\\n    document\\n      .getElementsByTagName('head')[0]\\n      .appendChild(link);\\n  }, [href]);\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import { useRef, useEffect } from 'react';\\n\\nfunction useInterval(\\n  callback: Function,\\n  delay: number,\\n  deps: React.DependencyList = [],\\n) {\\n  const savedCallback = useRef<Function>(() => {});\\n\\n  // Remember the latest callback.\\n  useEffect(() => {\\n    savedCallback.current = callback;\\n  }, [callback]);\\n\\n  // Set up the interval.\\n  useEffect(() => {\\n    function tick() {\\n      savedCallback.current();\\n    }\\n\\n    let id = setInterval(tick, delay);\\n    return () => clearInterval(id);\\n  }, [delay].concat(deps));\\n}\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-js\"\n  }), \"const useArray = (initial) => {\\n  const [value, setValue] = useState(initial);\\n  return {\\n    value,\\n    setValue,\\n    add: useCallback((a) => setValue((v) => [...v, a]), []),\\n    clear: useCallback(() => setValue(() => []), []),\\n    removeById: useCallback(\\n      (id) =>\\n        setValue((arr) =>\\n          arr.filter((v) => v && v.id !== id),\\n        ),\\n      [],\\n    ),\\n    removeIndex: useCallback(\\n      (index) =>\\n        setValue((v) => {\\n          v.splice(index, 1);\\n          return v;\\n        }),\\n      [],\\n    ),\\n  };\\n};\\n\"))), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useActive({ onChange, refEl }) {\\n  const [value, setValue] = useState(false);\\n  const handleMouseDown = () => {\\n    setValue(true);\\n    onChange(true);\\n  };\\n  const handleMouseUp = () => {\\n    setValue(false);\\n    onChange(false);\\n  };\\n  useEffect(() => {\\n    if (refEl && refEl.current) {\\n      refEl.current.addEventListener(\\n        'mousedown',\\n        handleMouseDown,\\n      );\\n      refEl.current.addEventListener(\\n        'mouseup',\\n        handleMouseUp,\\n      );\\n    }\\n    return () => {\\n      if (refEl && refEl.current) {\\n        refEl.current.removeEventListener(\\n          'mousedown',\\n          handleMouseDown,\\n        );\\n        refEl.current.removeEventListener(\\n          'mouseup',\\n          handleMouseUp,\\n        );\\n      }\\n    };\\n  }, []);\\n\\n  return value;\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Det som kan trekkes ut,\"), mdx(\"h2\", null, \"burde trekkes ut.\"), mdx(\"p\", null, \"Om ikke for gjenbrukbarhet, s\\xE5 for lesbarhet.\"), mdx(\"hr\", null), mdx(\"h2\", null, \"Custom hooks typing tips\"), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Hva om vi ønsker å tilby reload funksjon?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"om\": true,\n    \"vi\": true,\n    \"ønsker\": true,\n    \"å\": true,\n    \"tilby\": true,\n    \"reload\": true,\n    \"funksjon?\\\"\": true\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  React.useEffect(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = () => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  };\\n\\n  React.useEffect(reload, [username]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = () => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  };\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Blir feil for reload lages på ny for hver gang!\\\"\",\n    \"subtitle\": \"\\\"Blir\",\n    \"feil\": true,\n    \"for\": true,\n    \"reload\": true,\n    \"lages\": true,\n    \"på\": true,\n    \"ny\": true,\n    \"hver\": true,\n    \"gang!\\\"\": true\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = () => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  };\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"22\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"22\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return avatar;\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"function useFetchGithubAvatar(username: string) {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return [avatar, reload];\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"subtitle=\\\"Må ha typing\\\"\",\n    \"subtitle\": \"\\\"Må\",\n    \"ha\": true,\n    \"typing\\\"\": true\n  }), \"function useFetchGithubAvatar(\\n  username: string,\\n): [string | null, () => void] {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return [avatar, reload];\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"3[4:31] subtitle=\\\"Dette er dårlig API. Hva betyr dette??\\\"\",\n    \"3[4:31]\": true,\n    \"subtitle\": \"\\\"Dette\",\n    \"er\": true,\n    \"dårlig\": true,\n    \"API.\": true,\n    \"Hva\": true,\n    \"betyr\": true,\n    \"dette??\\\"\": true\n  }), \"function useFetchGithubAvatar(\\n  username: string,\\n): [string | null, () => void] {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return [avatar, reload];\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"3[4:46] subtitle=\\\"Kan navngi bedre med TypeScript 4\\\"\",\n    \"3[4:46]\": true,\n    \"subtitle\": \"\\\"Kan\",\n    \"navngi\": true,\n    \"bedre\": true,\n    \"med\": true,\n    \"TypeScript\": true,\n    \"4\\\"\": true\n  }), \"function useFetchGithubAvatar(\\n  username: string,\\n): [avatar: string | null, reload: () => void] {\\n  const [avatar, setAvatar] = React.useState<string | null>(\\n    null,\\n  );\\n\\n  const reload = React.useCallback(() => {\\n    const controller = new AbortController();\\n    const getData = async () => {\\n      const opts = { signal: controller.signal };\\n      const result = await fetch(\\n        `https://api.github.com/users/${username}`,\\n        opts,\\n      );\\n      const data = await result.json();\\n\\n      setAvatar(data.avatar_url);\\n    };\\n    getData();\\n    return () => controller.abort();\\n  }, [username]);\\n\\n  React.useEffect(reload, [reload]);\\n\\n  return [avatar, reload];\\n}\\n\"))), mdx(\"hr\", null), mdx(\"h2\", null, \"Oppgaver:\"), mdx(\"p\", null, \"Skriv en custom hook for en counter med increment og decrement\"), mdx(\"p\", null, \"(avansert) Skriv en custom hook for \\xE5 polle data fra Github trend-api. Tips (se \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"useInterval\"), \"):\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"https://ghapi.huchen.dev/repositories?language=javascript\"\n  }), \"https://ghapi.huchen.dev/repositories?language=javascript\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Context\"), mdx(\"hr\", null), mdx(\"p\", null, \"Noen ganger kan det bli tungvindt \\xE5 sende data over flere ledd.\"), mdx(\"p\", null, \"Eller du \\xF8nsker \\xE5 samle tilstandsendringer p\\xE5 ett sted.\"), mdx(\"hr\", null), mdx(Image, {\n    src: imgs.context,\n    mdxType: \"Image\"\n  }), mdx(\"hr\", null), mdx(\"h3\", null, \"Klassiske Eksempler\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Theming\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Spr\\xE5kst\\xF8tte\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\\"Global atom state\\\"\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"\\\"Module atom state\\\"\")), mdx(\"hr\", null), mdx(CodeSurfer, {\n    mdxType: \"CodeSurfer\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"title=\\\"Gitt modeller\\\"\",\n    \"title\": \"\\\"Gitt\",\n    \"modeller\\\"\": true\n  }), \"type Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"7,8,13\",\n    \"7,8,13\": true\n  }), \"type Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"type Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport default ThemeContext;\\n\"))), mdx(\"hr\", null), mdx(CodeSurferColumns, {\n    themes: [dracula, github],\n    sizes: [2, 1],\n    mdxType: \"CodeSurferColumns\"\n  }, mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContext from './themeContext.ts';\\n\\nfunction App() {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport default ThemeContext;\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"4:7\",\n    \"4:7\": true\n  }), \"import ThemeContext from './themeContext.ts';\\n\\nfunction App() {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport default ThemeContext;\\n\"))), mdx(Step, {\n    subtitle: \"Abstraksjonslekasje\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"10,14\",\n    \"10,14\": true\n  }), \"import ThemeContext from './themeContext.ts';\\n\\nfunction App() {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContext.Provider>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport default ThemeContext;\\n\"))), mdx(Step, {\n    subtitle: \"Bedre\",\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport default function ThemeContextProvider({\\n  children,\\n}: React.PropsWithChildren<{}>) {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  return (\\n    <button style={{ backgroundColor: '#f00' }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider, {\\n  ThemeContext,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  return (\\n    <button style={{ backgroundColor: '#f00' }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport { ThemeContext };\\n\\nexport default function ThemeContextProvider({\\n  children,\\n}: React.PropsWithChildren<{}>) {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider, {\\n  ThemeContext,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  const { theme } = React.useContext(ThemeContext);\\n  return (\\n    <button style={{ backgroundColor: '#f00' }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider, {\\n  ThemeContext,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  const { theme } = React.useContext(ThemeContext);\\n  return (\\n    <button style={{ backgroundColor: theme.background }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"16\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"16 subtitle=\\\"Hva om context ikke er satt av en provider?\\\"\",\n    \"subtitle\": \"\\\"Hva\",\n    \"om\": true,\n    \"context\": true,\n    \"ikke\": true,\n    \"er\": true,\n    \"satt\": true,\n    \"av\": true,\n    \"en\": true,\n    \"provider?\\\"\": true\n  }), \"import ThemeContextProvider, {\\n  ThemeContext,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  const { theme } = React.useContext(ThemeContext);\\n  return (\\n    <button style={{ backgroundColor: theme.background }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-diff\"\n  }), \"\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"4\": true,\n    \"className\": \"language-ts\",\n    \"metastring\": \"4\"\n  }), \"import ThemeContextProvider, {\\n  ThemeContext,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  const { theme } = React.useContext(ThemeContext);\\n  return (\\n    <button style={{ backgroundColor: theme.background }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport function useTheme() {\\n  const context = React.useContext(ThemeContext);\\n  if (context === undefined) {\\n    throw new Error(\\n      'useTheme must be used within a ThemeContextProvider',\\n    );\\n  }\\n  return context;\\n}\\n\\nexport default function ThemeContextProvider({\\n  children,\\n}: React.PropsWithChildren<{}>) {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  );\\n}\\n\"))), mdx(Step, {\n    mdxType: \"Step\"\n  }, mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\"\n  }), \"import ThemeContextProvider, {\\n  useTheme,\\n} from './themeContext.ts';\\n\\nfunction App() {\\n  return (\\n    <ThemeContextProvider>\\n      <main>\\n        <h1>Hello, World!</h1>\\n      </main>\\n    </ThemeContextProvider>\\n  );\\n}\\n\\nfunction MyButton() {\\n  const { theme } = useTheme();\\n  return (\\n    <button style={{ backgroundColor: theme.background }}>\\n      Click me!\\n    </button>\\n  );\\n}\\n\")), mdx(\"pre\", null, mdx(\"code\", _extends({\n    parentName: \"pre\"\n  }, {\n    \"className\": \"language-ts\",\n    \"metastring\": \"23:31\",\n    \"23:31\": true\n  }), \"// file: themeContext.ts\\n\\ntype Theme = {};\\ntype Themes = {\\n  light: Theme;\\n  dark: Theme;\\n};\\nconst themes: Themes = {\\n  light: {},\\n  dark: {},\\n};\\n\\ntype ThemeContextValue = {\\n  theme: Theme;\\n  updateTheme(themeKey: keyof Themes): void;\\n};\\n\\nconst ThemeContext = createContext<ThemeContextValue>({\\n  theme: themes.light,\\n  updateTheme() {},\\n});\\n\\nexport function useTheme() {\\n  const context = React.useContext(ThemeContext);\\n  if (context === undefined) {\\n    throw new Error(\\n      'useTheme must be used within a ThemeContextProvider',\\n    );\\n  }\\n  return context;\\n}\\n\\nexport default function ThemeContextProvider({\\n  children,\\n}: React.PropsWithChildren<{}>) {\\n  const [themeName, updateTheme] = useState<keyof Themes>(\\n    'light',\\n  );\\n  const theme = themes[themeName];\\n\\n  return (\\n    <ThemeContext.Provider value={{ theme, updateTheme }}>\\n      {children}\\n    </ThemeContext.Provider>\\n  );\\n}\\n\")))), mdx(\"hr\", null), mdx(\"h2\", null, \"Kj\\xF8rende kode\"), mdx(\"p\", null, mdx(\"a\", _extends({\n    parentName: \"p\"\n  }, {\n    \"href\": \"http://var.show/akva-context-theme\"\n  }), \"http://var.show/akva-context-theme\")), mdx(\"hr\", null), mdx(\"h2\", null, \"Oppgaver\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Utvid Theme context til \\xE5 lagre theme navn og mulighet til \\xE5 toggle theme.\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"Lag en count context som lar deg increment & decrement uansett hvor (bruk sammen med useReducer).\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"(avansert) Lag en \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"LocaleDateFormat\"), \" context som har et spr\\xE5k og lar deg formatere \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Date\"), \"-objekter.\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"matchPath":"/*","id":"70b07066-c7a2-5a2c-a79a-2bb1d14e332c","slug":"","title":"Frontendkurs 2020"}},"staticQueryHashes":[]}